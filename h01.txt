#include<opencv.hpp>
#include<omp.h>
#include<Eigen/Sparse>
#include<Eigen/Dense>
#include "Eigen/CholmodSupport"
#include "Eigen/UmfPackSupport"
#define INTERATION_NUM 15
struct CorresPoint
{
	double x1;
	double y1;
	double x2;
	double y2;
	int crow;
};
typedef Eigen::Triplet<double> Trip;
void Calculate_Matrix_R(CvMat* R,double fai,double omiga,double kappa);
void xyz2XYZ(CvMat* R,double x,double y,double z,double* X,double* Y,double* Z);
void main()
{
	omp_set_num_threads(4);
	char X_str[1024];
	int NumOfImage=339;
	int EveryStage=200;
	int No_1=195;
	int No_2=194;  //此处应赋初值，编号从0开始
	int nBstep=10;
	int rowh,colh;
	int* Re_seq=new int [NumOfImage];
	for(int i=0;i<NumOfImage;i++)
	{
		Re_seq[i]=i;
	}
	Re_seq[No_1]=NumOfImage-1;
	Re_seq[No_2]=NumOfImage-2;
	Re_seq[NumOfImage-1]=No_1;
	Re_seq[NumOfImage-2]=No_2;
	int StageNum=NumOfImage/EveryStage+1;
	double sigma0;
	double p;
	FILE* fpB;
	FILE* fpX;
    FILE* fpL;
	fpL=fopen("C:\\Matlabfiles\\L9.txt","w");
	double* Weight=new double [NumOfImage*NumOfImage];
	double WeightSD=200;
	double WeightDD=100;
	fpB=fopen("F:\\BTB.txt","w");
	///////////////////////////////读初值
	//大程序里焦距的存储方式要改
	double* arr_Xs=new double [NumOfImage];
	double* arr_Ys=new double [NumOfImage];
	double* arr_Zs=new double [NumOfImage];
	double* arr_fai=new double [NumOfImage];
	double* arr_omiga=new double [NumOfImage];
	double* arr_kappa=new double [NumOfImage];
	double* arr_f=new double [NumOfImage];
	FILE* fpExterior;
//	fpExterior=fopen("E:\\killkillkill3720\\Generated_Exterior_Elements10.txt","r");
	fpExterior=fopen("E:\\Generated_Exterior_Elements2.txt","r");
//	fpExterior=fopen("F:\\Double.txt","r");
	for(int i=0;i<NumOfImage;i++)
	{
		fscanf(fpExterior,"%lf\t%lf\t%lf\t%lf\t%lf\t%lf\t%lf\n",&arr_Xs[Re_seq[i]],&arr_Ys[Re_seq[i]],&arr_Zs[Re_seq[i]],&arr_fai[Re_seq[i]],&arr_omiga[Re_seq[i]],&arr_kappa[Re_seq[i]],&arr_f[Re_seq[i]]);
	}
	fclose(fpExterior);
	//////////////////////////////////////////////
	FILE* fpRight;
//	fpRight=fopen("F:\\killkillkill3720\\SelectedCoordinates_New7.txt","r");
//	fpRight=fopen("F:\\SelectedCoordinates_New6.txt","r");
	fpRight=fopen("E:\\killkillkill3720\\SelectedCoordinates_New7.txt","r");
//	fpRight=fopen("F:\\MoniData.txt","r");
	CorresPoint** puredPoints=new CorresPoint* [NumOfImage*NumOfImage];
	int* PureMatchNum=new int [NumOfImage*NumOfImage];
    for(int i=0;i<NumOfImage;i++)
	{
		for(int j=0;j<NumOfImage;j++)
		{
			PureMatchNum[i*NumOfImage+j]=0;
		}
	}
	int No_left,No_right,matchNum;
	while(!feof(fpRight))
	{
		fscanf(fpRight,"%d%d%d",&No_left,&No_right,&matchNum);
		PureMatchNum[Re_seq[No_left]*NumOfImage+Re_seq[No_right]]=matchNum;
		if(matchNum==0)
			puredPoints[Re_seq[No_left]*NumOfImage+Re_seq[No_right]]=NULL;
		else
		puredPoints[Re_seq[No_left]*NumOfImage+Re_seq[No_right]]=new CorresPoint [matchNum];
		for(int k=0;k<matchNum;k++)
		{
			fscanf(fpRight,"%lf",&puredPoints[Re_seq[No_left]*NumOfImage+Re_seq[No_right]][k].x1);
		}
		for(int k=0;k<matchNum;k++)
		{
			fscanf(fpRight,"%lf",&puredPoints[Re_seq[No_left]*NumOfImage+Re_seq[No_right]][k].y1);
		}
		for(int k=0;k<matchNum;k++)
		{
			fscanf(fpRight,"%lf",&puredPoints[Re_seq[No_left]*NumOfImage+Re_seq[No_right]][k].x2);
		}
		for(int k=0;k<matchNum;k++)
		{
			fscanf(fpRight,"%lf",&puredPoints[Re_seq[No_left]*NumOfImage+Re_seq[No_right]][k].y2);
		}
		fscanf(fpRight,"\n");
	}
	/////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////
	int nCols=6*NumOfImage-7;
	int nRows=0;
	int nEles=0;
	for(int i=0;i<NumOfImage;i++)
	{
		for(int j=0;j<NumOfImage;j++)
		{
			nRows+=PureMatchNum[i*NumOfImage+j];
			if((i<NumOfImage-2)&&(j<NumOfImage-2))
			{
				nEles+=12*PureMatchNum[i*NumOfImage+j];
			}
			else if(((i<NumOfImage-2)&&(j==NumOfImage-2))||((i==NumOfImage-2)&&(j<NumOfImage-2)))
			{
				nEles+=11*PureMatchNum[i*NumOfImage+j];
			}
			else if(((i<NumOfImage-2)&&(j==NumOfImage-1))||((i==NumOfImage-1)&&(j<NumOfImage-2)))
			{
				nEles+=6*PureMatchNum[i*NumOfImage+j];
			}
			else if(((i==NumOfImage-2)&&(j==NumOfImage-1))||((i==NumOfImage-1)&&(j==NumOfImage-2)))
			{
				nEles+=5*PureMatchNum[i*NumOfImage+j];
			}
			else
			{
				if(PureMatchNum[i*NumOfImage+j])
				printf("啊？\n");
			}
		}
	}
	int cRows=0;
	for(int i=0;i<NumOfImage;i++)
	{
		for(int j=0;j<NumOfImage;j++)
		{
			for(int k=0;k<PureMatchNum[i*NumOfImage+j];k++)
			{
				puredPoints[i*NumOfImage+j][k].crow=cRows;
				cRows++;
			}
		}
	}
	int nperB=int(nEles/nBstep)+1;

	std::vector<Trip> mBtripletList;
//	std::vector<Trip> mBP2tripletList;
	std::vector<Trip> mXtripletList;
//	Eigen::SparseMatrix<double> smB(nRows,nCols);
//	Eigen::SparseMatrix<double> smBP(nRows,nCols);
	Eigen::SparseMatrix<double> smBPB(nCols,nCols);
//	Eigen::SparseMatrix<double> smBPB2(nCols,nCols);
//	Eigen::SparseMatrix<double> smBPB3(nCols,nCols);
//	Eigen::SparseMatrix<double> smBPB_d2(nCols,nCols);
//	Eigen::SparseMatrix<double> smInv_BPB(nCols,nCols);
//	Eigen::VectorXd vL(nRows);
//	std::vector<Trip> vL;
	Eigen::SparseMatrix<double> svL(nRows,1);
	Eigen::SparseMatrix<double> svV(nRows,1);
	Eigen::SparseMatrix<double> svX(nCols,1);
	Eigen::SparseVector<double> svBPL;
	Eigen::VectorXd dvBPL(nCols);
	Eigen::VectorXd dvV(nRows);
//	Eigen::VectorXd dvL(nRows);
	Eigen::SparseMatrix<double>* psmBPB=new Eigen::SparseMatrix<double> [StageNum];
	for(int i=0;i<StageNum;i++)
	{
		psmBPB[i].resize(nCols,nCols);
	}
/*	for(int i=0;i<NumOfImage;i++)
	{
	    ppsmBPB[i]=new Eigen::SparseMatrix<double>(nCols,nCols) ;
	}*/
	std::vector<int> GoodPhotos;
	double* arr_p=new double [nRows];
	int method;
//	CvMat* mB=cvCreateMat(nRows,nCols,CV_32FC1);
//	CvMat* mL=cvCreateMat(nRows,1,CV_32FC1);
//	CvMat* mV=cvCreateMat(nRows,1,CV_32FC1);
//	CvMat* mX=cvCreateMat(nCols,1,CV_32FC1);
//	CvMat* mBTB=cvCreateMat(nCols,nCols,CV_32FC1);
//	CvMat* mInv_BTB=cvCreateMat(nCols,nCols,CV_32FC1);
//	CvMat* mBTL=cvCreateMat(nCols,1,CV_32FC1);

//	CvMat* mBP=cvCreateMat(nRows,nCols,CV_32FC1);
//	CvMat* mVTV=cvCreateMat(1,1,CV_32FC1);
	
	
	double BLength;
	double vtpv;
	int interator=0;
	bool stop=false;
//	Eigen::ConjugateGradient<Eigen::SparseMatrix<double>> linearSolver;
	Eigen::CholmodSupernodalLLT < Eigen::SparseMatrix < double > > superSolver;
	Eigen::UmfPackLU < Eigen::SparseMatrix < double > > superSolver2;
	Eigen::SimplicialLDLT < Eigen::SparseMatrix < double > > superSolver3;
	for(int i=0;i<nCols;i++)
	{
		dvBPL[i]=0;
	}
	while(!stop&&interator<INTERATION_NUM)
	{
		interator++;

		if(interator>3)
		{
			for(int i=0;i<nRows;i++)
			{
				p=exp(-0.05*pow(fabs(dvV(i,0))/sigma0,3));
				arr_p[i]=p;
			}
		}
		else
		{
			for(int i=0;i<nRows;i++)
			{
				p=1;
				arr_p[i]=p;
			}
		}
		mBtripletList.clear();
	//	mBPtripletList.clear();
		mBtripletList.reserve(nEles);
	//	mBPtripletList.reserve(nEles);
#pragma omp parallel for	private(cRows,BLength)
		for(int i=0;i<NumOfImage;i++)
	    {
		    printf("%d\n",i);
		   CvMat* mF0=cvCreateMat(3,3,CV_32FC1);
	       CvMat* mF_fai1=cvCreateMat(3,3,CV_32FC1);
	       CvMat* mF_omiga1=cvCreateMat(3,3,CV_32FC1);
	       CvMat* mF_kappa1=cvCreateMat(3,3,CV_32FC1);
	       CvMat* mF_fai2=cvCreateMat(3,3,CV_32FC1);
	       CvMat* mF_omiga2=cvCreateMat(3,3,CV_32FC1);
	       CvMat* mF_kappa2=cvCreateMat(3,3,CV_32FC1);
	       CvMat* mR1=cvCreateMat(3,3,CV_32FC1);
	       CvMat* mR2=cvCreateMat(3,3,CV_32FC1);
		   Eigen::SparseMatrix<double> smBPB_d(nCols,nCols);
		   std::vector<Trip> mBPtripletList;
		   double X1,Y1,Z1,X2,Y2,Z2;
	       double x1,y1,x2,y2,f1,f2;
	       double F0,F_fai1,F_omiga1,F_kappa1,F_fai2,F_omiga2,F_kappa2,F_Xs1,F_Ys1,F_Zs1,F_Xs2,F_Ys2,F_Zs2;
			for(int j=0;j<NumOfImage;j++)
		    {
			  
				if(PureMatchNum[i*NumOfImage+j]==0)continue;

				int* Indexs=new int [12];
				double* kernels=new double [12*12];
				double* Fs=new double [12];
				double* Ls=new double [12];
				for(int k=0;k<12;k++)
				{
					Indexs[k]=-1;
					Fs[k]=0;
					Ls[k]=0;
				}
				for(int k=0;k<144;k++)
				{
					kernels[k]=0;
				}
				if(i<NumOfImage-2)
				{
					Indexs[0]=6*i;
					Indexs[1]=6*i+1;
					Indexs[2]=6*i+2;
					Indexs[3]=6*i+3;
					Indexs[4]=6*i+4;
					Indexs[5]=6*i+5;
				}
				else if(i==NumOfImage-2)
				{
					Indexs[1]=6*i;
					Indexs[2]=6*i+1;
					Indexs[3]=6*i+2;
					Indexs[4]=6*i+3;
					Indexs[5]=6*i+4;
				}
				if(j<NumOfImage-2)
				{
					Indexs[6]=6*j;
					Indexs[7]=6*j+1;
					Indexs[8]=6*j+2;
					Indexs[9]=6*j+3;
					Indexs[10]=6*j+4;
					Indexs[11]=6*j+5;
				}
				else if(j==NumOfImage-2)
				{
					Indexs[7]=6*j;
					Indexs[8]=6*j+1;
					Indexs[9]=6*j+2;
					Indexs[10]=6*j+3;
					Indexs[11]=6*j+4;
				}
				Calculate_Matrix_R(mR1,arr_fai[i],arr_omiga[i],arr_kappa[i]);
				Calculate_Matrix_R(mR2,arr_fai[j],arr_omiga[j],arr_kappa[j]);
				BLength=sqrt(pow(arr_Xs[j]-arr_Xs[i],2)+pow(arr_Ys[j]-arr_Ys[i],2)+pow(arr_Zs[j]-arr_Zs[i],2));
				for(int k=0;k<PureMatchNum[i*NumOfImage+j];k++)
			    {
					   cRows=puredPoints[i*NumOfImage+j][k].crow;
					    double F1;
					    mBPtripletList.reserve(12);
					    x1=puredPoints[i*NumOfImage+j][k].x1;
						y1=puredPoints[i*NumOfImage+j][k].y1;
						x2=puredPoints[i*NumOfImage+j][k].x2;
						y2=puredPoints[i*NumOfImage+j][k].y2;
						f1=arr_f[i];
						f2=arr_f[j];
						xyz2XYZ(mR1,x1,y1,-f1,&X1,&Y1,&Z1);
						xyz2XYZ(mR2,x2,y2,-f2,&X2,&Y2,&Z2);
						//计算F0
						cvSetReal2D(mF0,0,0,arr_Xs[j]-arr_Xs[i]);
						cvSetReal2D(mF0,0,1,arr_Ys[j]-arr_Ys[i]);
						cvSetReal2D(mF0,0,2,arr_Zs[j]-arr_Zs[i]);
						cvSetReal2D(mF0,1,0,X1);
						cvSetReal2D(mF0,1,1,Y1);
						cvSetReal2D(mF0,1,2,Z1);
						cvSetReal2D(mF0,2,0,X2);
						cvSetReal2D(mF0,2,1,Y2);
						cvSetReal2D(mF0,2,2,Z2);
						F0=cvDet(mF0)/((X1*Z2-X2*Z1)*sqrt(pow(arr_Xs[j]-arr_Xs[i],2)+pow(arr_Ys[j]-arr_Ys[i],2)+pow(arr_Zs[j]-arr_Zs[i],2)));
						F1=F0;
						F0=F0*sqrt(arr_p[cRows]);
						//计算对fai1的偏导
						cvSetReal2D(mF_fai1,0,0,arr_Xs[j]-arr_Xs[i]);
						cvSetReal2D(mF_fai1,0,1,arr_Ys[j]-arr_Ys[i]);
						cvSetReal2D(mF_fai1,0,2,arr_Zs[j]-arr_Zs[i]);
						cvSetReal2D(mF_fai1,1,0,-Z1);
						cvSetReal2D(mF_fai1,1,1,0);
						cvSetReal2D(mF_fai1,1,2,X1);
						cvSetReal2D(mF_fai1,2,0,X2);
						cvSetReal2D(mF_fai1,2,1,Y2);
						cvSetReal2D(mF_fai1,2,2,Z2);
						F_fai1=-cvDet(mF_fai1)/((X1*Z2-X2*Z1)*sqrt(pow(arr_Xs[j]-arr_Xs[i],2)+pow(arr_Ys[j]-arr_Ys[i],2)+pow(arr_Zs[j]-arr_Zs[i],2)))+(cvDet(mF0)*(-X1*X2-Z1*Z2))/(BLength*(X1*Z2-X2*Z1)*(X1*Z2-X2*Z1));
						//计算对omiga1的偏导
						cvSetReal2D(mF_omiga1,0,0,arr_Xs[j]-arr_Xs[i]);
						cvSetReal2D(mF_omiga1,0,1,arr_Ys[j]-arr_Ys[i]);
						cvSetReal2D(mF_omiga1,0,2,arr_Zs[j]-arr_Zs[i]);
						cvSetReal2D(mF_omiga1,1,0,-Y1*sin(arr_fai[i]));
						cvSetReal2D(mF_omiga1,1,1,X1*sin(arr_fai[i])-Z1*cos(arr_fai[i]));
						cvSetReal2D(mF_omiga1,1,2,Y1*cos(arr_fai[i]));
						cvSetReal2D(mF_omiga1,2,0,X2);
						cvSetReal2D(mF_omiga1,2,1,Y2);
						cvSetReal2D(mF_omiga1,2,2,Z2);
						F_omiga1=-cvDet(mF_omiga1)/((X1*Z2-X2*Z1)*sqrt(pow(arr_Xs[j]-arr_Xs[i],2)+pow(arr_Ys[j]-arr_Ys[i],2)+pow(arr_Zs[j]-arr_Zs[i],2)))+(cvDet(mF0)*(-Y1*Z2*sin(arr_fai[i])-Y1*X2*cos(arr_fai[i])))/(BLength*(X1*Z2-X2*Z1)*(X1*Z2-X2*Z1));
						//计算对kappa1的偏导
						cvSetReal2D(mF_kappa1,0,0,arr_Xs[j]-arr_Xs[i]);
						cvSetReal2D(mF_kappa1,0,1,arr_Ys[j]-arr_Ys[i]);
						cvSetReal2D(mF_kappa1,0,2,arr_Zs[j]-arr_Zs[i]);
						cvSetReal2D(mF_kappa1,1,0,-Y1*cos(arr_fai[i])*cos(arr_omiga[i])-Z1*sin(arr_omiga[i]));
						cvSetReal2D(mF_kappa1,1,1,X1*cos(arr_fai[i])*cos(arr_omiga[i])+Z1*sin(arr_fai[i])*cos(arr_omiga[i]));
						cvSetReal2D(mF_kappa1,1,2,X1*sin(arr_omiga[i])-Y1*sin(arr_fai[i])*cos(arr_omiga[i]));
						cvSetReal2D(mF_kappa1,2,0,X2);
						cvSetReal2D(mF_kappa1,2,1,Y2);
						cvSetReal2D(mF_kappa1,2,2,Z2);
						F_kappa1=-cvDet(mF_kappa1)/((X1*Z2-X2*Z1)*sqrt(pow(arr_Xs[j]-arr_Xs[i],2)+pow(arr_Ys[j]-arr_Ys[i],2)+pow(arr_Zs[j]-arr_Zs[i],2)))+(cvDet(mF0)*(-Y1*Z2*cos(arr_fai[i])*cos(arr_omiga[i])-Z1*Z2*sin(arr_omiga[i])-X1*X2*sin(arr_omiga[i])+X2*Y1*sin(arr_fai[i])*cos(arr_omiga[i])))/(BLength*(X1*Z2-X2*Z1)*(X1*Z2-X2*Z1));
						//计算对fai2的偏导
						cvSetReal2D(mF_fai2,0,0,arr_Xs[j]-arr_Xs[i]);
						cvSetReal2D(mF_fai2,0,1,arr_Ys[j]-arr_Ys[i]);
						cvSetReal2D(mF_fai2,0,2,arr_Zs[j]-arr_Zs[i]);
						cvSetReal2D(mF_fai2,1,0,X1);
						cvSetReal2D(mF_fai2,1,1,Y1);
						cvSetReal2D(mF_fai2,1,2,Z1);
						cvSetReal2D(mF_fai2,2,0,-Z2);
						cvSetReal2D(mF_fai2,2,1,0);
						cvSetReal2D(mF_fai2,2,2,X2);
						F_fai2=-cvDet(mF_fai2)/((X1*Z2-X2*Z1)*sqrt(pow(arr_Xs[j]-arr_Xs[i],2)+pow(arr_Ys[j]-arr_Ys[i],2)+pow(arr_Zs[j]-arr_Zs[i],2)))+(cvDet(mF0)*(X1*X2+Z1*Z2))/(BLength*(X1*Z2-X2*Z1)*(X1*Z2-X2*Z1));
						//计算对omiga2的偏导
						cvSetReal2D(mF_omiga2,0,0,arr_Xs[j]-arr_Xs[i]);
						cvSetReal2D(mF_omiga2,0,1,arr_Ys[j]-arr_Ys[i]);
						cvSetReal2D(mF_omiga2,0,2,arr_Zs[j]-arr_Zs[i]);
						cvSetReal2D(mF_omiga2,1,0,X1);
						cvSetReal2D(mF_omiga2,1,1,Y1);
						cvSetReal2D(mF_omiga2,1,2,Z1);
						cvSetReal2D(mF_omiga2,2,0,-Y2*sin(arr_fai[j]));
						cvSetReal2D(mF_omiga2,2,1,X2*sin(arr_fai[j])-Z2*cos(arr_fai[j]));
						cvSetReal2D(mF_omiga2,2,2,Y2*cos(arr_fai[j]));
						F_omiga2=-cvDet(mF_omiga2)/((X1*Z2-X2*Z1)*sqrt(pow(arr_Xs[j]-arr_Xs[i],2)+pow(arr_Ys[j]-arr_Ys[i],2)+pow(arr_Zs[j]-arr_Zs[i],2)))+(cvDet(mF0)*(X1*Y2*cos(arr_fai[j])+Z1*Y2*sin(arr_fai[j])))/(BLength*(X1*Z2-X2*Z1)*(X1*Z2-X2*Z1));
						//计算对kappa2的偏导
						cvSetReal2D(mF_kappa2,0,0,arr_Xs[j]-arr_Xs[i]);
						cvSetReal2D(mF_kappa2,0,1,arr_Ys[j]-arr_Ys[i]);
						cvSetReal2D(mF_kappa2,0,2,arr_Zs[j]-arr_Zs[i]);
						cvSetReal2D(mF_kappa2,1,0,X1);
						cvSetReal2D(mF_kappa2,1,1,Y1);
						cvSetReal2D(mF_kappa2,1,2,Z1);
						cvSetReal2D(mF_kappa2,2,0,-Y2*cos(arr_fai[j])*cos(arr_omiga[j])-Z2*sin(arr_omiga[j]));
						cvSetReal2D(mF_kappa2,2,1,X2*cos(arr_fai[j])*cos(arr_omiga[j])+Z2*sin(arr_fai[j])*cos(arr_omiga[j]));
						cvSetReal2D(mF_kappa2,2,2,X2*sin(arr_omiga[j])-Y2*sin(arr_fai[j])*cos(arr_omiga[j]));
						F_kappa2=-cvDet(mF_kappa2)/((X1*Z2-X2*Z1)*sqrt(pow(arr_Xs[j]-arr_Xs[i],2)+pow(arr_Ys[j]-arr_Ys[i],2)+pow(arr_Zs[j]-arr_Zs[i],2)))+(cvDet(mF0)*(X1*X2*sin(arr_omiga[j])-X1*Y2*sin(arr_fai[j])*cos(arr_omiga[j])+Z1*Y2*cos(arr_fai[j])*cos(arr_omiga[j])+Z1*Z2*sin(arr_omiga[j])))/(BLength*(X1*Z2-X2*Z1)*(X1*Z2-X2*Z1));
						//计算对Xs1,Ys1,Zs1的偏导
						F_Xs1=(Y1*Z2-Y2*Z1)/((X1*Z2-X2*Z1)*sqrt(pow(arr_Xs[j]-arr_Xs[i],2)+pow(arr_Ys[j]-arr_Ys[i],2)+pow(arr_Zs[j]-arr_Zs[i],2)))-(cvDet(mF0)*(arr_Xs[j]-arr_Xs[i]))/((X1*Z2-X2*Z1)*pow(BLength,3));
						F_Ys1=-1/sqrt(pow(arr_Xs[j]-arr_Xs[i],2)+pow(arr_Ys[j]-arr_Ys[i],2)+pow(arr_Zs[j]-arr_Zs[i],2))-(cvDet(mF0)*(arr_Ys[j]-arr_Ys[i]))/((X1*Z2-X2*Z1)*pow(BLength,3));
						F_Zs1=(X1*Y2-X2*Y1)/((X1*Z2-X2*Z1)*sqrt(pow(arr_Xs[j]-arr_Xs[i],2)+pow(arr_Ys[j]-arr_Ys[i],2)+pow(arr_Zs[j]-arr_Zs[i],2)))-(cvDet(mF0)*(arr_Zs[j]-arr_Zs[i]))/((X1*Z2-X2*Z1)*pow(BLength,3));
						//计算对Xs2,Ys2,Zs2的偏导
						F_Xs2=-F_Xs1;
						F_Ys2=-F_Ys1;
						F_Zs2=-F_Zs1;
						//构造矩阵B
						if(i<NumOfImage-2)
						{
							#pragma omp critical (evalB)
							{
								mBtripletList.emplace_back(cRows,6*i,F_Xs1);
								mBtripletList.emplace_back(cRows,6*i+1,F_Ys1);
								mBtripletList.emplace_back(cRows,6*i+2,F_Zs1);
								mBtripletList.emplace_back(cRows,6*i+3,F_fai1);
								mBtripletList.emplace_back(cRows,6*i+4,F_omiga1);
								mBtripletList.emplace_back(cRows,6*i+5,F_kappa1);
							}
							Fs[0]=F_Xs1*sqrt(arr_p[cRows]);
							Fs[1]=F_Ys1*sqrt(arr_p[cRows]);
							Fs[2]=F_Zs1*sqrt(arr_p[cRows]);						
							Fs[3]=F_fai1*sqrt(arr_p[cRows]);
							Fs[4]=F_omiga1*sqrt(arr_p[cRows]);	
							Fs[5]=F_kappa1*sqrt(arr_p[cRows]);
						}
						else if(i==NumOfImage-2)
						{
							#pragma omp critical (evalB)
							{
								mBtripletList.emplace_back(cRows,6*i,F_Ys1);
								mBtripletList.emplace_back(cRows,6*i+1,F_Zs1);
								mBtripletList.emplace_back(cRows,6*i+2,F_fai1);
								mBtripletList.emplace_back(cRows,6*i+3,F_omiga1);
								mBtripletList.emplace_back(cRows,6*i+4,F_kappa1);
							}
							Fs[1]=F_Ys1*sqrt(arr_p[cRows]);							
							Fs[2]=F_Zs1*sqrt(arr_p[cRows]);						
							Fs[3]=F_fai1*sqrt(arr_p[cRows]);						
							Fs[4]=F_omiga1*sqrt(arr_p[cRows]);
							Fs[5]=F_kappa1*sqrt(arr_p[cRows]);
						}
						if(j<NumOfImage-2)
						{
							#pragma omp critical (evalB)
							{
								mBtripletList.emplace_back(cRows,6*j,F_Xs2);
								mBtripletList.emplace_back(cRows,6*j+1,F_Ys2);
								mBtripletList.emplace_back(cRows,6*j+2,F_Zs2);
								mBtripletList.emplace_back(cRows,6*j+3,F_fai2);
								mBtripletList.emplace_back(cRows,6*j+4,F_omiga2);
								mBtripletList.emplace_back(cRows,6*j+5,F_kappa2);
							}
							Fs[6]=F_Xs2*sqrt(arr_p[cRows]);
							Fs[7]=F_Ys2*sqrt(arr_p[cRows]);
							Fs[8]=F_Zs2*sqrt(arr_p[cRows]);
							Fs[9]=F_fai2*sqrt(arr_p[cRows]);
							Fs[10]=F_omiga2*sqrt(arr_p[cRows]);
							Fs[11]=F_kappa2*sqrt(arr_p[cRows]);
						}
						else if(j==NumOfImage-2)
						{
							#pragma omp critical (evalB)
							{
								mBtripletList.emplace_back(cRows,6*j,F_Ys2);
								mBtripletList.emplace_back(cRows,6*j+1,F_Zs2);
								mBtripletList.emplace_back(cRows,6*j+2,F_fai2);
								mBtripletList.emplace_back(cRows,6*j+3,F_omiga2);
								mBtripletList.emplace_back(cRows,6*j+4,F_kappa2);
							}
							Fs[7]=F_Ys2*sqrt(arr_p[cRows]);
							Fs[8]=F_Zs2*sqrt(arr_p[cRows]);
							Fs[9]=F_fai2*sqrt(arr_p[cRows]);
							Fs[10]=F_omiga2*sqrt(arr_p[cRows]);
		        			Fs[11]=F_kappa2*sqrt(arr_p[cRows]);
						}
			            dvV[cRows]=-F1;
						for(int l=0;l<12;l++)
						{
							for(int o=0;o<12;o++)
							{
								kernels[l*12+o]+=Fs[l]*Fs[o];
							}
						}
						for(int l=0;l<12;l++)
						{
							Ls[l]+=Fs[l]*F0;
						}
//						smBP.setFromTriplets(mBP2tripletList.begin(),mBP2tripletList.end());
//						smBPB_d2=smBP.transpose()*smBP;
//						smBPB2+=smBPB_d2;
	//					mBP2tripletList.clear();
						/*if(interator>3)
						{
							p=exp(-0.05*pow(fabs(cvGetReal2D(mV,cRows,0))/sigma0,3));
							arr_p[cRows]=p;
						}
						else
						{
							p=1;
				            arr_p[cRows]=p;
						}*/
					
				}
				for(int l=0;l<12;l++)
				{
					if(Indexs[l]!=-1)
					{
						#pragma omp critical (evalBPL)
						dvBPL[Indexs[l]]=dvBPL[Indexs[l]]+Ls[l];
					}
					for(int o=0;o<12;o++)
					{
						if(Indexs[l]!=-1&&Indexs[o]!=-1)
						{
							#pragma omp critical (evalBPB)
							mBPtripletList.emplace_back(Indexs[l],Indexs[o],kernels[l*12+o]);
						}
					}
				}
				smBPB_d.setFromTriplets(mBPtripletList.begin(),mBPtripletList.end());
				mBPtripletList.clear();
#pragma omp critical (sumBPB)
				psmBPB[i/EveryStage]+=smBPB_d;
				delete [] kernels;
				delete [] Fs;
				delete [] Ls;
				delete [] Indexs;
			}
			cvReleaseMat(&mF0);
			cvReleaseMat(&mF_fai1);
			cvReleaseMat(&mF_omiga1);
			cvReleaseMat(&mF_kappa1);
			cvReleaseMat(&mF_fai2);
			cvReleaseMat(&mF_omiga2);
			cvReleaseMat(&mF_kappa2);
			cvReleaseMat(&mR1);
			cvReleaseMat(&mR2);
			mBPtripletList.clear();
		}
		for(int u=0;u<StageNum;u++)
		{
			smBPB+=psmBPB[u];
			psmBPB[u].setZero();
		}
		superSolver3.compute(smBPB);
		smBPB.setZero();
		Eigen::VectorXd vX =superSolver3.solve(dvBPL);
		stop=true;
		for(int i=0;i<NumOfImage-2;i++)
		{
			if(fabs(vX[6*i+3])>0.00005)
			stop=false;
			if(fabs(vX[6*i+4])>0.00005)
			stop=false;
			if(fabs(vX[6*i+5])>0.00005)
			stop=false;
		}
		if(stop==true||interator==INTERATION_NUM)
		{
			   for(int i=0;i<nRows;i++)
				{
					fprintf(fpL,"%lf\n",-dvV(i,0));
				}
		}
		dvBPL.setZero();
		svV.setZero();
		for(int i=0;i<nCols;i++)
		{
			mXtripletList.emplace_back(i,0,vX[i]);
		}
		for(int i=0;i<mBtripletList.size();i++)
		{
			rowh=mBtripletList[i].row();
			colh=mBtripletList[i].col();
			dvV[rowh]+=mBtripletList[i].value()*vX[colh];
		}
		mXtripletList.clear();
//		Eigen::VectorXd vX;
		//检测矩阵输入是否正确
		if(cRows==nRows)printf("Right!\n");
		else printf("Wrong!\tcRows=%d,\tnRows=%d\n",cRows,nRows);
	    //解算改正数
		
		/*for(int i=0;i<nRows;i++)
		{
			for(int j=0;j<nCols;j++)
			{
				cvSetReal2D(mBP,i,j,cvGetReal2D(mB,i,j)*arr_p[i]);
			}
		}*/
		/*if(interator>3)
		{
			for(int i=0;i<nRows;i++)
			{
				p=exp(-0.05*pow(fabs(cvGetReal2D(mV,i,0))/sigma0,3));
				arr_p[i]=p;
				for(int j=0;j<nCols;j++)
				{
					cvSetReal2D(mBP,i,j,cvGetReal2D(mB,i,j)*p);
				}
			}
		}
		else
		{
			for(int i=0;i<nRows;i++)
			{
				p=1;
				arr_p[i]=p;
				for(int j=0;j<nCols;j++)
				{
					cvSetReal2D(mBP,i,j,cvGetReal2D(mB,i,j)*p);
				}
			}
		}*/
		/*cvGEMM(mBP,mB,1,NULL,0,mBTB,CV_GEMM_A_T);
		cvGEMM(mBP,mL,1,NULL,0,mBTL,CV_GEMM_A_T);*/
		/*for(int y=0;y<mBTB->height;y++)
		{
			for(int x=0;x<mBTB->width;x++)
			{
				fprintf(fpB,"%20.6e",cvGetReal2D(mBTB,y,x));
			}
			fprintf(fpB,"\n");
		}
		fclose(fpB);*/
		/*if(NumOfImage<15)
			method=CV_LU;
		else
			method=CV_SVD_SYM;
		cvInvert(mBTB,mInv_BTB,CV_SVD_SYM);
		cvGEMM(mInv_BTB,mBTL,1,NULL,0,mX);*/
		sprintf(X_str,"F:\\killkillkill3720\\XbyStep5\\X%d.txt",interator);
		fpX=fopen(X_str,"w");
		fprintf(fpX,"%d\n",interator);
		for(int y=0;y<vX.size();y++)
		{
			fprintf(fpX,"%lf\n",vX[y]);
		}
		fclose(fpX);
		//cvSolve(mB,mL,mX);
		for(int i=0;i<NumOfImage-2;i++)
		{
			//arr_Xs[i]+=cvGetReal2D(mX,6*i,0);
			arr_Xs[i]+=vX[6*i];
			//arr_Ys[i]+=cvGetReal2D(mX,6*i+1,0);
			arr_Ys[i]+=vX[6*i+1];
			//arr_Zs[i]+=cvGetReal2D(mX,6*i+2,0);
			arr_Zs[i]+=vX[6*i+2];
			//arr_fai[i]+=cvGetReal2D(mX,6*i+3,0);
			arr_fai[i]+=vX[6*i+3];
			//arr_omiga[i]+=cvGetReal2D(mX,6*i+4,0);
			arr_omiga[i]+=vX[6*i+4];
			//arr_kappa[i]+=cvGetReal2D(mX,6*i+5,0);
			arr_kappa[i]+=vX[6*i+5];
		}
		//arr_Ys[NumOfImage-2]+=cvGetReal2D(mX,6*(NumOfImage-2),0);
		arr_Ys[NumOfImage-2]+=vX[6*(NumOfImage-2)];
		//arr_Zs[NumOfImage-2]+=cvGetReal2D(mX,6*(NumOfImage-2)+1,0);
		arr_Zs[NumOfImage-2]+=vX[6*(NumOfImage-2)+1];
		//arr_fai[NumOfImage-2]+=cvGetReal2D(mX,6*(NumOfImage-2)+2,0);
		arr_fai[NumOfImage-2]+=vX[6*(NumOfImage-2)+2];
		//arr_omiga[NumOfImage-2]+=cvGetReal2D(mX,6*(NumOfImage-2)+3,0);
		arr_omiga[NumOfImage-2]+=vX[6*(NumOfImage-2)+3];
		//arr_kappa[NumOfImage-2]+=cvGetReal2D(mX,6*(NumOfImage-2)+4,0);
		arr_kappa[NumOfImage-2]+=vX[6*(NumOfImage-2)+4];
		FILE* fpExterior2;
	   fpExterior2=fopen("F:\\killkillkill3720\\Generated_Exterior_Elementsomp2.txt","w");
	   for(int i=0;i<NumOfImage;i++)
	  {
		    fprintf(fpExterior2,"%lf\t%lf\t%lf\t%lf\t%lf\t%lf\t%lf\n",arr_Xs[i],arr_Ys[i],arr_Zs[i],arr_fai[i],arr_omiga[i],arr_kappa[i],arr_f[i]);
	   }
	   fclose(fpExterior2);
		vtpv=0;
		//cvGEMM(mB,mX,1,mL,-1,mV);
		for(int i=0;i<nRows;i++)
		{
			vtpv+=dvV(i,0)*dvV(i,0)*arr_p[i];
		}
		//cvGEMM(mV,mV,1,NULL,0,mVTV,CV_GEMM_A_T);
		sigma0=sqrt(vtpv/(nRows-nCols));
		
		/*if(fabs(cvGetReal2D(mX,6*(NumOfImage-2)+2,0))>0.00005)
			stop=false;
		if(fabs(cvGetReal2D(mX,6*(NumOfImage-2)+3,0))>0.00005)
			stop=false;
		if(fabs(cvGetReal2D(mX,6*(NumOfImage-2)+4,0))>0.00005)
			stop=false;*/
	}
	/*FILE* fpmX;
	fpmX=fopen("F:\\mX.txt","w");
	double mi;
	for(int i=0;i<nCols;i++)
	{
		mi=sqrt(cvGetReal2D(mInv_BTB,i,i))*sigma0;
		fprintf(fpmX,"%lf\n",mi);
	}
	for(int i=0;i<nCols;i++)
	{
		mi=sqrt(cvGetReal2D(mInv_BTB,i,i))*sigma0;
		fprintf(fpmX,"%e\n",mi);
	}
	fclose(fpmX);*/
	fclose(fpL);

	cvWaitKey(0);
}
void Calculate_Matrix_R(CvMat* R,double fai,double omiga,double kappa)
{
	CvMat* R_fai=cvCreateMat(3,3,CV_32FC1);
	CvMat* R_omiga=cvCreateMat(3,3,CV_32FC1);
	CvMat* R_kappa=cvCreateMat(3,3,CV_32FC1);
	CvMat* R_fai_omiga=cvCreateMat(3,3,CV_32FC1);
	for(int i=0;i<3;i++)
	{
		for(int j=0;j<3;j++)
		{
			cvSetReal2D(R_fai,i,j,0);
			cvSetReal2D(R_omiga,i,j,0);
			cvSetReal2D(R_kappa,i,j,0);
		}
	}
	cvSetReal2D(R_fai,0,0,cos(fai));
	cvSetReal2D(R_fai,0,2,-sin(fai));
	cvSetReal2D(R_fai,1,1,1);
	cvSetReal2D(R_fai,2,0,sin(fai));
	cvSetReal2D(R_fai,2,2,cos(fai));
	cvSetReal2D(R_omiga,0,0,1);
	cvSetReal2D(R_omiga,1,1,cos(omiga));
	cvSetReal2D(R_omiga,1,2,-sin(omiga));
	cvSetReal2D(R_omiga,2,1,sin(omiga));
	cvSetReal2D(R_omiga,2,2,cos(omiga));
	cvSetReal2D(R_kappa,0,0,cos(kappa));
	cvSetReal2D(R_kappa,0,1,-sin(kappa));
	cvSetReal2D(R_kappa,1,0,sin(kappa));
	cvSetReal2D(R_kappa,1,1,cos(kappa));
	cvSetReal2D(R_kappa,2,2,1);
	cvGEMM(R_fai,R_omiga,1,NULL,0,R_fai_omiga,0);
	cvGEMM(R_fai_omiga,R_kappa,1,NULL,0,R,0);
	cvReleaseMat(&R_fai);
	cvReleaseMat(&R_omiga);
	cvReleaseMat(&R_kappa);
	cvReleaseMat(&R_fai_omiga);
}
void xyz2XYZ(CvMat* R,double x,double y,double z,double* pX,double* pY,double* pZ)
{
	CvMat *mSrc=cvCreateMat(3,1,CV_32FC1);
	CvMat *mDst=cvCreateMat(3,1,CV_32FC1);
	cvSetReal2D(mSrc,0,0,x);
	cvSetReal2D(mSrc,1,0,y);
	cvSetReal2D(mSrc,2,0,z);
	cvGEMM(R,mSrc,1,NULL,0,mDst);
	*pX=cvGetReal2D(mDst,0,0);
	*pY=cvGetReal2D(mDst,1,0);
	*pZ=cvGetReal2D(mDst,2,0);
	cvReleaseMat(&mSrc);
	cvReleaseMat(&mDst); 
}